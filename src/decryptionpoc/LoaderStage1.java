package decryptionpoc;

import java.util.Base64;
import java.io.File;
import java.io.FileOutputStream;

/**
 *
 * @author Max 'Libra' Kersten
 */
public class LoaderStage1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        //The original base64 encoded and XOR-encrypted classes.dex file
        String encryptedBase64 = "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";
        //As provided in the source code: use the simpleClassName
        byte[] secondParameter = "pgtqOqBeLbrMXbWPfPzUMEuF".getBytes();
        //Save the output to a byte[]
        byte[] output = decrypt(Base64.getDecoder().decode(encryptedBase64), secondParameter);
        try {
            FileOutputStream fos = new FileOutputStream(new File("/home/libra/classes.zip"));
            fos.write(output);
            fos.close();
            System.out.println("Decryption complete: file written to '/home/libra/classes.zip'");
        } catch (Exception e) {
            System.out.println("Error: ");
            e.printStackTrace();
        }
    }

    private static byte[] decrypt(byte[] byteArray1, byte[] byteArray2) {
        //Create a new byte[] with the same size as the first parameter
        byte[] output = new byte[byteArray1.length];
        //Create a new variable of the type 'Long' with the value 0
        Long l = new Long(0);
        //For each byte in the first parameter, we perform certain actions
        for (int i = 0; i < byteArray1.length; ++i) { //++i == i++ though it returns it values as well as changing i, which does not matter in this case
            //Create a new variable of the type 'Long' during each loop
            Long l2;
            //On the index of i in the output array, perform an xor on the value on the index in the first parameter 
            //with the value of variable l
            output[i] = (byte) (byteArray1[i] ^ byteArray2[(int) l.longValue()]);
            //Both l and l2 equal the value of l + 1
            l = l2 = Long.valueOf(l + 1);
            //if l2's value does not exceed the length of the second parameter, the loop should continue
            if (l2 < (long) byteArray2.length) {
                continue;
            }
            //Set the value of l to 0
            l = new Long(0);
        }
        //Return the output
        return output;
    }

}
