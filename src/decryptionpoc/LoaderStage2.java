package decryptionpoc;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.util.Base64;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

/**
 *
 * @author Max 'Libra' Kersten
 */
public class LoaderStage2 {

    public static void main(String[] args) throws IOException {
        //dictionary();
        getDex();
    }

    /**
     * Gets the classes.zip file with the classes.dex file in it
     * @throws IOException 
     */
    private static void getDex() throws IOException {
        //Load asset from the home directory of the project
        InputStream inputStream = new FileInputStream("jzRNvE");
        //Obtain the size of the file
        int availableInt = inputStream.available();
        //Create byte[] with the size of the inputStream
        byte[] jzRNvE_asset = new byte[availableInt];
        //Original location on the mobile device: getFilesDir() + Separator + cls.dex
        //Using another location in the PoC
        String location = "/home/libra/cls.zip";
        //Initialise the new File object
        File clsZip = new File(location);
        //Create a new empty file
        clsZip.createNewFile();
        //Read amount of bytes returned by available, being the complete file
        //Data is stored in the byte[] which is given in the argument
        inputStream.read(jzRNvE_asset); 
        //Close the inputStream as it is not needed anymore
        inputStream.close();

        //Mutate the content of the asset which is saved in the same variable
        jzRNvE_asset = decrypt(jzRNvE_asset);
        //Create a fIleOutputStream for the 
        FileOutputStream fos = new FileOutputStream(clsZip);
        ZipOutputStream zos = new ZipOutputStream(new BufferedOutputStream(fos)); //jzRNvE_asset should be used
        ZipEntry zipEntry = new ZipEntry("classes.dex");
        //Puts the zipEntry in the ZIP-file
        zos.putNextEntry(zipEntry);
        //Write the data in the given entry
        zos.write(jzRNvE_asset);
        //Close both readers
        zos.close();
        fos.close();
        //Give feedback to the user
        System.out.println("Written: " + location);
    }

    /**
     * Uses the prepared signature as described in the paper
     * @param paramArrayOfByte the already base64 decoded file
     * @return the decrypted byte[], which is a classes.dex file
     */
    private static byte[] decrypt(byte[] paramArrayOfByte) {
        try {
            //Get signature after it has been extracted using the given method
            InputStream inputSignature = new FileInputStream("726793.sig");
            int sigLength = inputSignature.available();
            byte[] signatureBytes = new byte[sigLength];
            inputSignature.read(signatureBytes);
            inputSignature.close();
            
            byte[] value = paramArrayOfByte; //Default decoding //Base64.getDecoder().decode(paramArrayOfByte)
            //byte[] value = Base64.getDecoder().decode(paramArrayOfByte);
            byte[] key = byteArrayToStringMutator(signatureBytes).getBytes();
            
            byte[] output = xorFunction(value, key);
            //Return the decrypted byte[]
            return output;
        } catch (IOException ex) {
            System.out.println("IOException during decryption");
            System.exit(0);
            return null;
        }
    }

    /**
     * Some obscure MD5 hashing and AND functions to mutate a given byteArray
     * @param paramArrayOfByte the array to be mutated
     * @return the mutated array in the form of a String
     */
    private static String byteArrayToStringMutator(byte[] paramArrayOfByte) {
        try {
            //                                                    MD5
            paramArrayOfByte = MessageDigest.getInstance(decrypt("KyNS")).digest(paramArrayOfByte);
            StringBuffer localStringBuffer = new StringBuffer();
            int i = 0;
            while (i < paramArrayOfByte.length) {
                localStringBuffer.append(Integer.toHexString(paramArrayOfByte[i] & 0xFF | 0x100).substring(1, 3));
                i += 1;
            }
            return localStringBuffer.toString();
        } catch (Exception ex) {
        }
        return "";
    }

    /**
     * Prints every encrypted string in the document together with the decrypted
     * equivalent. The decrypted value is commented behind every line to improve
     * the ease of use.
     */
    private static void dictionary() {
        System.out.println("BwkDCh8IAkkEFx4VAwkTVgIEFUkmCwMEEioGFhEGAxU= equals " + decrypt("BwkDCh8IAkkEFx4VAwkTVgIEFUkmCwMEEioGFhEGAxU=")); //android.content.res.AssetManager
        System.out.println("CRcCFg== equals " + decrypt("CRcCFg==")); //open
        System.out.println("DAYRGV4NBwkAViMVFA4JHw== equals " + decrypt("DAYRGV4NBwkAViMVFA4JHw==")); //java.lang.String
        System.out.println("AQITOQMSAxMU equals " + decrypt("AQITOQMSAxMU")); //getAssets
        System.out.println("DB01NgYk equals " + decrypt("DB01NgYk")); //jzRNvE
        System.out.println("BxEGERwABAsC equals " + decrypt("BxEGERwABAsC")); //available
        System.out.println("DAYRGV4ICUkhERwE equals " + decrypt("DAYRGV4ICUkhERwE")); //java.io.File
        System.out.println("AQITPhkNAxQjEQI equals " + decrypt("AQITPhkNAxQjEQI")); //getFilesDir
        System.out.println("FQIXGQIAEggV equals " + decrypt("FQIXGQIAEggV")); //separator
        System.out.println("BQsUVhQEHg== equals " + decrypt("BQsUVhQEHg==")); //cls.dex
        System.out.println("BRUCGQQEKAIQPhkNAw== equals " + decrypt("BRUCGQQEKAIQPhkNAw==")); //createNewFile
        System.out.println("FAIGHA== equals " + decrypt("FAIGHA==")); //read
        System.out.println("PSU= equals " + decrypt("PSU=")); //[B
        System.out.println("BQsICxU= equals " + decrypt("BQsICxU=")); //close
        System.out.println("KB0FNR4DExA2FzcA equals " + decrypt("KB0FNR4DExA2FzcA")); //NzbMnbuwQoGa
        System.out.println("DAYRGV4ICUkhERwEKRITCAUVNRMVHREM equals " + decrypt("DAYRGV4ICUkhERwEKRITCAUVNRMVHREM")); //java.io.FileOutputStream
        System.out.println("DAYRGV4UEg4LVgoIFkk9EQAuExMXDQQyEhUCGR0= equals " + decrypt("DAYRGV4UEg4LVgoIFkk9EQAuExMXDQQyEhUCGR0=")); //java.util.zip.ZipOutputStream
        System.out.println("DAYRGV4ICUklDRYHAxUCHD8UEhcSDCMVFAIGFQ== equals " + decrypt("DAYRGV4ICUklDRYHAxUCHD8UEhcSDCMVFAIGFQ==")); //java.io.BufferedOutputStream
        System.out.println("DAYRGV4UEg4LVgoIFkk9EQAkCBMVAQ== equals " + decrypt("DAYRGV4UEg4LVgoIFkk9EQAkCBMVAQ==")); //java.util.zip.ZipEntry
        System.out.println("BQsGCwMEFUkDHQg= equals " + decrypt("BQsGCwMEFUkDHQg=")); //classes.dex
        System.out.println("FhITNhUZEiIJDAIY equals " + decrypt("FhITNhUZEiIJDAIY")); //putNextEntry
        System.out.println("ERUODBU= equals " + decrypt("ERUODBU=")); //write
        System.out.println("FgYVHR4V equals " + decrypt("FgYVHR4V")); //parent
        System.out.println("AQITORISCQsSDBUxBxMP equals " + decrypt("AQITORISCQsSDBUxBxMP")); //getAbsolutePath
        System.out.println("AQITKBETAwkTPhkNAw== equals " + decrypt("AQITKBETAwkTPhkNAw==")); //getParentFile
        System.out.println("AQITKBETAwkT equals " + decrypt("AQITKBETAwkT")); //getParent
        System.out.println("KyNS equals " + decrypt("KyNS")); //MD5
        System.out.println("AgYLDhkKSBQeCwQEC0kjHQgiCgYUCzwOBwMCCg== equals " + decrypt("AgYLDhkKSBQeCwQEC0kjHQgiCgYUCzwOBwMCCg==")); //dalvik.system.DexClassLoader
        System.out.println("DAYRGV4NBwkAVjMNBxQUNB8AAgIV equals " + decrypt("DAYRGV4NBwkAVjMNBxQUNB8AAgIV")); //java.lang.ClassLoader
        System.out.println("AQITKBECDQYAHT0ACAYAHQI= equals " + decrypt("AQITKBECDQYAHT0ACAYAHQI=")); //getPackageManager
        System.out.println("AQITKBECDQYAHTkPAAg= equals " + decrypt("AQITKBECDQYAHTkPAAg=")); //getPackageInfo
        System.out.println("AQITKBECDQYAHT4ACwI= equals " + decrypt("AQITKBECDQYAHT4ACwI=")); //getPackageName
        System.out.println("BwkDCh8IAkkEFx4VAwkTVgAMSDcGGxsAAQIqGR4AAQIV equals " + decrypt("BwkDCh8IAkkEFx4VAwkTVgAMSDcGGxsAAQIqGR4AAQIV")); //android.content.pm.PackageManager
        System.out.println("ISIzJyMoISkmLCUzIzQ= equals " + decrypt("ISIzJyMoISkmLCUzIzQ=")); //GET_SIGNATURES
        System.out.println("FQ4AFhEVExUCCw== equals " + decrypt("FQ4AFhEVExUCCw==")); //signatures
        System.out.println("EgglAQQEJxUVGQk= equals " + decrypt("EgglAQQEJxUVGQk=")); //toByteArray
        System.out.println("Ly8yLzQMJw== equals " + decrypt("Ly8yLzQMJw==")); //IHUWDmA
        System.out.println("Mz8EGTM3KhIDMykuFRA= equals " + decrypt("Mz8EGTM3KhIDMykuFRA=")); //UXcaCVLudKYOsw
        System.out.println("BwkDCh8IAkkSDBkNSCUGCxVXUg== equals " + decrypt("BwkDCh8IAkkSDBkNSCUGCxVXUg==")); //android.util.Base64
        System.out.println("AgIEFxQE equals " + decrypt("AgIEFxQE")); //decode
        System.out.println("IiIhOSUtMg== equals " + decrypt("IiIhOSUtMg==")); //DEFAULT
        System.out.println("AQITOgkVAxQ= equals " + decrypt("AQITOgkVAxQ=")); //getBytes
        System.out.println("LhAsHAcUHz0G equals " + decrypt("LhAsHAcUHz0G")); //HwKdwuyZa
        System.out.println("BwkDCh8IAkkGCABPJxcXFBkCBxMOFx4= equals " + decrypt("BwkDCh8IAkkGCABPJxcXFBkCBxMOFx4=")); //android.app.Application
        System.out.println("CQkkChUAEgI= equals " + decrypt("CQkkChUAEgI=")); //onCreate
        System.out.println("BwkDCh8IAkkGCABPLwkUDAIUCwIJDBEVDwgJ equals " + decrypt("BwkDCh8IAkkGCABPLwkUDAIUCwIJDBEVDwgJ")); //android.app.Instrumentation
        System.out.println("CAIQOQARCg4EGQQICQk= equals " + decrypt("CAIQOQARCg4EGQQICQk=")); //newApplication
        System.out.println("BwkDCh8IAkkEFx4VAwkTVjMOCBMCAAQ= equals " + decrypt("BwkDCh8IAkkEFx4VAwkTVjMOCBMCAAQ=")); //android.content.Context
        System.out.println("CggGHDMNBxQU equals " + decrypt("CggGHDMNBxQU")); //loadClass
        System.out.println("AQITOxwAFRQrFxEFAxU= equals " + decrypt("AQITOxwAFRQrFxEFAxU=")); //getClassLoader
        System.out.println("BQgKVwcDARQeGQNOAQoPGQkABQtINREICCYXCA== equals " + decrypt("BQgKVwcDARQeGQNOAQoPGQkABQtINREICCYXCA==")); //com/wbgsyas/gmhayacl/MainApp
        System.out.println("AQITOhESAyQIFgQEHhM= equals " + decrypt("AQITOhESAyQIFgQEHhM=")); //getBaseContext
    }

    private static void textInDecryptFunction() {
        String a = "MjUhOyY4ISUyMDkvKS0yISQmMCE1Ow==";
        String b = "AxAVEAIEEQ8CDwIJAxAVEA==";
        System.out.println(decrypt(a) + decrypt(b));
    }

    /**
     * Decrypts the given string based on the algorithm in the sample
     *
     * @param input the text to be decrypted
     * @return the decrypted string
     */
    private static String decrypt(String input) {
        //Simple name of the class used as the second byte array
        byte[] simpleName = "fggxpa".getBytes();
        return new String(xorFunction(Base64.getDecoder().decode(input), simpleName));
    }

    /**
     * The function used to decrypt the byte array in the sample
     *
     * @param paramArrayOfByte1 array with data
     * @param paramArrayOfByte2 the key
     * @return the decrypted data
     */
    private static byte[] xorFunction(byte[] paramArrayOfByte1, byte[] paramArrayOfByte2) {
        byte[] arrayOfByte = new byte[paramArrayOfByte1.length];
        int i = 0;
        while (i < paramArrayOfByte1.length) {
            arrayOfByte[i] = ((byte) (paramArrayOfByte1[i] ^ paramArrayOfByte2[(i % paramArrayOfByte2.length)]));
            i += 1;
        }
        return arrayOfByte;
    }
}
